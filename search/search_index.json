{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cosmocloud Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Info</p> <p>Cosmocloud is in access only beta mode right now. Please reach out on contact@cosmocloud.io to request faster access.</p> <p>Cosmocloud is the only full featured, no-code, Backend-as-a-Service platform which aim to simplify the application development with building complex APIs, easy database management, one-click deployments, and authentication.</p> <p>A fully production battle-ready, secure and performant platform which aims not to just build your MVP and POC apps but to run your backend layer with Billions of API calls every month! Cosmocloud uses proven tech stacks to build your backend layer, with no compromise to scalability, customisability and security!</p> <p></p> <p>Without the hassle of spending long dev hours writing code, maintaining huge teams to manage infrastructure and deployments, Cosmocloud abstracts everything from code to deployments to infrastructure in a single Black-box.</p> <p>Info</p> <p>Make your developers at least 10x more productive!</p>"},{"location":"application-layer/authentication/","title":"Authentication","text":"<p>Cosmocloud comes with built-in authentication module that is a Production Grade authentication system. We let you integrate with any 3rd Party SSO / Auth Provider such as AWS Cognito, Auth0, Google Identity, Okta, etc, anything that works on OAuth and JWT Tokens.</p>"},{"location":"application-layer/authentication/#setup-authentication","title":"Setup Authentication","text":"<ul> <li>Just browse to Application Layer --&gt; Configs, and just enable Authentication Config.</li> <li>Once enabled, you need to add two configuration properties.<ul> <li>JWKI URI - This is the public URL your Authentication Provider gives you, where the public keys can be found. Docs for some of the Auth Providers are below -<ul> <li>AWS Cognito JWKS URI</li> <li>Auth0 JWKS URI</li> <li>Firebase Authentication (Check point 1)</li> <li>Okta JWKS Keys Endpoint</li> <li>etc...</li> </ul> </li> <li>Audience (optional) - This is the identifier created by you in the authentication provider, to identify your Backend service.</li> </ul> </li> </ul> <p> \u200b\u200b</p>"},{"location":"application-layer/authentication/#faqs","title":"\u200b\u200bFAQs","text":"<ol> <li>The above list of Authentication Providers is not an exhaustive list. You can use any Provider till the time they expose the public JWK keys on a public URL.</li> <li>Can I use my own self-hosted Authentication Provider (like Django)? Yes! You can use any self managed user management way, provided you expose the Public Keys of your service via a Public Endpoint.</li> <li>If you are facing any issue while connecting your Authentication Provider, you can reach out to our team via contact@cosmocloud.io.</li> </ol>"},{"location":"application-layer/apis/conditions/","title":"Conditions","text":"<p>While writing conditions is nodes such as <code>If Else</code>, <code>If Else v2</code>, <code>Switch Case</code>, you would have to write a condition with which these nodes would resolve into <code>true</code> or <code>false</code>.</p> <p>When you open the editor, to write the condition, you would have to write a condition in a JSON way -</p> <pre><code>{\n    \"$and\": [\n        {\n            \"name\": {\n                \"$eq\": \"John\"\n            }\n        },\n        {\n            \"age\": {\n                \"$gt\": 18\n            }\n        }\n    ]\n}\n</code></pre> <p>In the above scenario, we have 2 expressions, both of which have to be true as they are inside an <code>$and</code> condition.</p>"},{"location":"application-layer/apis/conditions/#simple-conditions","title":"Simple conditions","text":"<p>A simple condition can be of the form -  <pre><code>{\n    &lt;key&gt;: {\n        &lt;operator&gt;: &lt;value&gt;\n    }\n}\n</code></pre></p>"},{"location":"application-layer/apis/conditions/#available-operators-in-the-system-are-","title":"Available operators in the system are -","text":"<ul> <li>$eq: Equal to</li> <li>$neq: Not equal to</li> <li>$gt: Greater than</li> <li>$gte: Greater than or equal to</li> <li>$lt: Less than</li> <li>$lte: Less than or equal to</li> </ul>"},{"location":"application-layer/apis/conditions/#building-complex-queries","title":"Building Complex Queries","text":"<p>Complex queries can be formed by using multiple simple or other complex queries, and joining each of them with <code>$and</code> or <code>$or</code>  operators.</p> <p>Example - </p> <pre><code>{\n    \"$and\": [\n        {\n            \"name\": {\n                \"$eq\": \"John\"\n            }\n        },\n        {\n            \"$or\": [\n                {\n                    \"$lte\": 20\n                },\n                {\n                    \"$ne\": \"Hello\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"application-layer/apis/create-get-api-from-scratch/","title":"Create a GET Request API from scratch","text":"<ul> <li>In this section, we'll delve into the process of creating a <code>GET</code> API to retrieve student data.</li> <li>Our objective is to design an API that retrieves specific student information based on the provided query parameters (if any).</li> </ul>"},{"location":"application-layer/apis/create-get-api-from-scratch/#designing-the-query-model","title":"Designing the Query Model","text":"<ul> <li>To facilitate the retrieval of specific student records, let's start by designing a Query Params Model that defines the structure of query parameters.</li> <li>Suppose we want to allow querying by <code>rollNumber</code> parameter. The <code>Query Params</code> model would be as follows:</li> </ul>"},{"location":"application-layer/apis/create-get-api-from-scratch/#creating-the-api","title":"Creating the API","text":"<ul> <li>Begin the creation of the <code>GET</code> API by navigating to the APIs section within the application layer on the project dashboard's sidebar.</li> <li>Follow the same steps as before, choosing to \"Create from Scratch\" if prompted.</li> <li>After reaching the API creation form, provide the necessary details including \"API name,\" \"Description,\" \"Request method\" (set to <code>GET</code>), \"Endpoint,\" \"Query model,\" and \"Authenticated.\"</li> <li> <p>Select the query model you've designed to enable the use of query parameters.</p> <p> </p> </li> <li> <p>Once all details are provided, proceed by clicking the \"Create\" button to generate the <code>GET</code> API.</p> </li> </ul>"},{"location":"application-layer/apis/create-get-api-from-scratch/#constructing-the-api-workflow","title":"Constructing the API Workflow","text":"<ul> <li>As before, move to the Flow section within the API Details page.</li> <li>The \"HTTP Trigger\" node is still relevant, capturing essential request data.</li> <li>Construct the API workflow using the flow engine. Reference this guide for a comprehensive understanding.</li> <li>For our <code>GET</code> API, the workflow should encompass retrieving student data based on the specified query parameters.</li> </ul>"},{"location":"application-layer/apis/create-get-api-from-scratch/#api-testing","title":"API Testing","text":"<ul> <li>To assess the functionality of your <code>GET</code> API, you can utilize tools such as Postman or directly input the API endpoint in a web browser.</li> <li>Append the necessary query parameters (e.g., <code>rollNumber</code>) to the endpoint URL to retrieve specific student records.</li> </ul>"},{"location":"application-layer/apis/create-get-api-from-scratch/#demonstrative-video-creating-and-testing-the-get-api","title":"Demonstrative Video: Creating and Testing the GET API","text":"<p>By following these steps, you can successfully create a <code>GET</code> API that retrieves student data based on provided query parameters using the designed query model.</p> <p>Info</p> <ul> <li>Similar to the <code>GET</code> request, the <code>DELETE</code> request can also employ either query parameters or URL parameters to identify the specific data to be deleted.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/","title":"Creating a POST request API from Scratch","text":"<ul> <li>Let's consider the task of building a <code>POST</code> API to add student data.</li> <li>To achieve this, we need to construct a Database Model, which will define the schema to store student data in the database.</li> <li>Additionally, we must design a Request Body Model, responsible for specifying the data structure sent within the <code>POST</code> request body of the API.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#crafting-the-database-model","title":"Crafting the Database Model","text":"<ul> <li>Suppose we need to store student information such as <code>name</code>, <code>rollNumber</code>, and <code>address</code>, where the <code>address</code> comprises <code>city</code> and <code>state</code> attributes.</li> <li>Hence, the database model for this purpose would be structured as follows.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#developing-the-request-body-model","title":"Developing the Request Body Model","text":"<ul> <li>Let's assume the desired payload for the post request is as follows. <pre><code>    {\n        name: string,\n        rollNumber: number,\n        city: string,\n        state: string\n    }\n</code></pre></li> <li>This payload will be transmitted from the frontend or client utilizing the API.</li> <li>To facilitate this, we need to create a new model of type <code>Request Body</code>, describing the expected payload structure.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#constructing-the-api","title":"Constructing the API","text":"<ul> <li>To begin creating the API, navigate to the APIs section within the application layer on the project dashboard's sidebar.</li> <li>If this is your initial API creation, a page will prompt you with a \"New API\" button.</li> <li>Alternatively, if APIs are already some apis created, the listing page will appear, featuring a \"Create API\" button at the top.</li> <li>Clicking the \"Create API\" button will initiate a pop-up to choose between using create the api using templates or starting from scratch.</li> <li>Opt for \"Create from Scratch\" and proceed by clicking the \"Next\" button.</li> <li> <p>A form will appear on the subsequent page, prompting you to specify the API details.</p> <p> </p> </li> <li> <p>Complete all the fields such as \"API name,\" \"Description,\" \"Request method,\" \"Endpoint,\" \"Query model,\" \"Request body,\" and \"Authenticated.\"</p> </li> <li>The \"Query model\" field presents the query models you have designed. Query model is used generally in <code>GET</code> requests to define the query params.</li> <li>Similarly, the \"Request body\" field displays the available request body models.</li> <li>After supplying all the details, click the \"Create\" button to create your API.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#demonstrative-video-creating-the-api","title":"Demonstrative Video: Creating the API","text":""},{"location":"application-layer/apis/create-post-api-from-scratch/#enhancing-the-api-workflow","title":"Enhancing the API Workflow","text":"<ul> <li>Navigate to the Flow section within the API Details page.</li> <li>You will encounter an \"HTTP Trigger\" node encompassing essential request data such as \"Request Endpoint,\" \"Request Method,\" \"Query Parameters,\" \"Request Body,\" and \"Authenticated\" status.</li> <li>Construct the API workflow within the flow engine. For an understanding of the flow engine's mechanics, consult this guide.</li> <li>To exemplify the creation of the API workflow for storing <code>Student</code> records, the following video provides a tutorial on utilizing the flow engine.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#api-testing","title":"API Testing","text":"<ul> <li>To facilitate the functionality of your API, you need to establish a connection between your database and CosmoCloud.</li> <li>Access the Application Layer through the project dashboard's sidebar and navigate to the Secrets section.</li> <li>Here, add a Database secret by supplying all the required details. Learn how to create a Database Secret here.</li> <li>Once the Database secret is successfully updated that signfies that your database has been connected.</li> <li>Now, deploy the APIs along with their associated models. After deployment and it's activation, the APIs become operational.</li> <li>With your API ready for use, proceed to the API Details page to copy the API endpoint for testing.</li> <li>Utilize Postman to test the API by sending data in the required payload format to avoid errors.</li> <li>Upon successful testing, your data will be inserted and can be verified in your database.</li> </ul>"},{"location":"application-layer/apis/create-post-api-from-scratch/#demonstrative-video-api-functionality-showcase","title":"Demonstrative Video: API Functionality Showcase","text":"<p>Info</p> <ul> <li>Similar to the <code>POST</code> request, PUT<code>and</code>PATCH` request also expect a Request Body in the API call. Consequently, creating a Request Body model specific to the PUT request is essential.</li> </ul>"},{"location":"application-layer/apis/expressions/","title":"Expressions","text":"<p>While writing expresseions is nodes such as <code>Build JSON</code> and <code>Merge JSON</code>, you would have to write the expression as a JSON object which would be evaluated to a value.</p> <p>When you open the editor, to write the expressions, sample expression would look like -</p> <pre><code>{\n    \"$add\": [\n        1, 2, { \"$multiply\": [1, 2] }, { \"$subtract\": [10, 5] }\n    ]\n}\n</code></pre> <p>The result of the above scenario would result to <code>10</code>.</p> <p>You can use these expressions to do mathematical operations in your worklows.</p>"},{"location":"application-layer/apis/expressions/#examples","title":"Examples","text":"<p>Lets say you need to calculate the total price of a product, which is calculated as <code>price * quantity</code> while building a JSON object in the flow (using <code>Build JSON</code> or <code>Merge JSON</code>)</p> <pre><code>{\n    \"totalPrice\":{\n        \"$multiply\": [\n            \"$.request.body.price\",\n            \"$.request.body.quantity\",\n            1.18                          // multiply TAX probably\n        ]\n    }\n}\n</code></pre>"},{"location":"application-layer/apis/expressions/#available-operators","title":"Available Operators","text":"<ul> <li>$add: Add all the values in the array</li> <li>$subtract: Subtract <code>value[0]</code> from <code>value[1]</code></li> <li>$multiply: Multiply all the values in the array</li> <li>$divide: Divide <code>value[0]</code> by <code>value[1]</code></li> </ul>"},{"location":"application-layer/apis/first-api/","title":"Your First API","text":"<p>REST APIs are the essence of Backend Development, the most used way for your frontend (client) to talk to your backend layer. There are various ways to create APIs in your Cosmocloud project.</p>"},{"location":"application-layer/apis/first-api/#using-templates","title":"Using Templates","text":"<p>You can quickly start creating the APIs and their corresponding models using use-case based Templates. These help you in auto generating convention based APIs and models for faster productivity.</p> <p>You can then customise and edit any API or model that is created via Templates.</p>"},{"location":"application-layer/apis/first-api/#available-templates","title":"Available Templates","text":"<ul> <li>CRUD APIs</li> <li>Search APIs</li> <li>Media / Object upload (coming soon)</li> </ul>"},{"location":"application-layer/apis/first-api/#building-from-scratch","title":"Building from Scratch","text":"<p>This is the method where you can start building your APIs from scratch. This will help you in customising your API endpoints, request methods as well as any Query Param Models / Request Body Models you want to use.</p>"},{"location":"application-layer/environments/create-environment/","title":"Creating Environments","text":"<p>Environments allows you to organize your work and collaborate efficiently. You start with a default <code>Production</code> environment, and you can create more environments as per your needs.</p>"},{"location":"application-layer/environments/create-environment/#how-to-create-an-environment","title":"How to Create an Environment","text":"<ol> <li>Click on the <code>Create Environment</code> button in the Environments List section.</li> <li>Choose the type of environment you want to create: <code>Staging</code>, <code>Development</code> or <code>Custom</code>.</li> <li>If you have selected <code>Custom</code> environment type, you are required to give it a unique name.</li> <li>For environment types other than <code>Custom</code>, the name of environment will be set automatically.</li> <li>For <code>Production</code> and <code>Staging</code> environment type, the resources are automatically set to <code>Dedicated</code> for optimal performance.</li> <li>For <code>Development</code> and <code>Custom</code> environment type, you may specify whether you want dedicated resources or shared resources.</li> <li>If you have selected dedicated resources,then you have to select a tier, that will ensure the amount of resources to be allocated to that environment.</li> <li>If you have selected shared resources, then you need to select an environment with which the resources will be shared.</li> </ol> <p>Info</p> <ul> <li><code>Production</code>,<code>Staging</code> and <code>Development</code> environments can only be created once. For creating multiple environments select <code>Custom</code> environment instead.</li> <li>Sharing of resources is only possible in environments with dedicated resources.</li> </ul>"},{"location":"application-layer/environments/delete-environment/","title":"Deactivate/Reactivate Environments","text":""},{"location":"application-layer/environments/delete-environment/#steps-to-deactivatereactivate-an-environment","title":"Steps to deactivate/reactivate an environment","text":""},{"location":"application-layer/environments/delete-environment/#navigate-to-the-environment-listing-page","title":"Navigate to the Environment Listing Page","text":"<ul> <li>Inside the Project dashboard click on the \"Environments\" section in <code>Application layer</code> dropdown. </li> </ul>"},{"location":"application-layer/environments/delete-environment/#select-the-environment-to-deactivatereactivate","title":"Select the Environment to Deactivate/Reactivate","text":"<ul> <li>Find the environment you want to deactivate or reactivate in the list. Each environment will have a convenient three dots icon <code>[\u2022\u2022\u2022]</code> next to it.</li> <li>Click on the three dots icon next to the environment you want to deactivate or reactivate. This will open up a menu with various options.</li> </ul>"},{"location":"application-layer/environments/delete-environment/#if-you-select-deactivate-environment","title":"If you select deactivate environment","text":"<ul> <li> <p>Among the options in the menu, you'll see \"deactivate.\" Click on it.    </p> </li> <li> <p>You'll be presented with a confirmation modal to confirm whether you really want to deactivate the environment?    </p> </li> <li>If you're absolutely sure about deactivating the environment, click \"Yes.\" </li> </ul>"},{"location":"application-layer/environments/delete-environment/#if-you-select-reactivate-environment","title":"If you select reactivate environment","text":"<ul> <li>Among the options in the menu, you'll see \"reactivate.\" Click on it.   </li> </ul>"},{"location":"application-layer/environments/delete-environment/#environment-deactivatedreactivated","title":"Environment deactivated/reactivated","text":"<ul> <li>You will see an acknowledgement message once the changes have been saved.</li> <li>The environment is now deactivated or reactivated.</li> </ul>"},{"location":"application-layer/environments/introduction/","title":"Introduction","text":"<p>Environments feature allows users to create and manage multiple infra environments for their projects, so that you can have multiple layers of testing or different versions deployed on different environments.</p>"},{"location":"application-layer/environments/introduction/#what-is-an-environment","title":"What is an Environment?","text":"<p>An environment is a self-contained individually scaled space where users can deploy and test their applications independent of each other. This feature is especially useful for managing development, staging, production and custom environments.</p>"},{"location":"application-layer/environments/introduction/#available-environments-types","title":"Available Environments Types","text":"<ul> <li>Production (default)</li> <li>Staging</li> <li>Development</li> <li>Custom</li> </ul>"},{"location":"application-layer/environments/types-of-env/","title":"Types of Environments","text":""},{"location":"application-layer/environments/types-of-env/#production-environment","title":"Production Environment","text":"<p>This is the default environment for your project where your final and polished app should reside. A <code>Production</code> environment can only have its own dedicated resources and cannot be shared with any other environment to maintain the highest level of performance,security and reliability to your application.</p> <p>Warning</p> <p><code>Production</code> environment cannot be created or deleted manually. It is created automatically on project creation and can be removed when the project gets deleted. You can only update the tier of the Production environment.</p>"},{"location":"application-layer/environments/types-of-env/#staging-environment","title":"Staging Environment","text":"<p>The <code>Staging</code> environment is to test your application before deploying the application to production. This environment deployments are mainly used by testers to test the application end to end and find bugs.Like the <code>Production</code> environment, it also has dedicated resources.</p>"},{"location":"application-layer/environments/types-of-env/#development-environment","title":"Development Environment","text":"<p>The <code>Development</code> environment is to create the APIs, Models and experimenting with other features that will not cause any issue in <code>Staging</code> or <code>Production</code> deployments. It can have dedicated resources or shared resources with any other dedicated environment.</p>"},{"location":"application-layer/environments/types-of-env/#custom-environments","title":"Custom Environments","text":"<p>The <code>Custom</code> environment is a customized environment which can be used by different teams to develop or test specific features and like, <code>Development</code> environment it can have either dedicated or shared resources based on the requirement of the user and unlike other environment types, there can be multiple custom environments.</p>"},{"location":"application-layer/environments/update-environment/","title":"Updating Environments","text":"<p>With our <code>Environments</code> feature, changing configurations can be done with just a few clicks. Here's a step-by-step guide to updating your environments:</p>"},{"location":"application-layer/environments/update-environment/#navigate-to-the-environment-listing-page","title":"Navigate to the Environment Listing Page","text":"<ul> <li>From the main dashboard, click on the <code>Environments</code> section. You'll see a list of all your environments, including <code>Production,</code> <code>Staging,</code> <code>Development,</code> and any <code>Custom</code> environments that you have created.</li> </ul>"},{"location":"application-layer/environments/update-environment/#select-the-environment-to-update","title":"Select the Environment to Update","text":"<ul> <li>Find the environment you want to update in the list and click on it's name. This will redirect you to the <code>Environment Details</code> page of that environment. </li> </ul>"},{"location":"application-layer/environments/update-environment/#explore-the-editable-sections","title":"Explore the Editable Sections","text":"<ul> <li>Within the <code>Environment Details</code> page, you'll discover information about the currently chosen environment. Certain aspects of this information can be modified, granting you the ability to make changes. Upon completing your edits, ensure to select the \"Save\" button to preserve the revised updates..</li> </ul>"},{"location":"application-layer/environments/update-environment/#make-your-changes","title":"Make Your Changes","text":"<p>Depending on the environment type, you'll have different editable options. For example:</p> <ul> <li>In the <code>Production</code> and <code>Staging</code> environments, you can only update the Tier.</li> <li>In the <code>Development</code> and <code>Custom</code> environments, you can update both Tier and Resource type.</li> </ul>"},{"location":"application-layer/environments/update-environment/#click-on-save","title":"Click on Save","text":"<ul> <li>Once you've made the desired changes, click on the <code>Save</code> button at the top-right of the page.</li> <li>You will see an acknowledgement message once the changes have been saved.</li> <li>The environment is now updated with the new settings.</li> </ul>"},{"location":"application-layer/flow-engine/exploring-nodes/","title":"Exploring Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#what-is-a-node-in-flow-engine","title":"What is a node in flow engine?","text":"<p>Nodes are the fundamental building blocks that power the functionality and versatility of the Flow Engine. These nodes play a pivotal role in shaping the behaviour, logic, and outcomes of your API workflows. A Node represents an entity that can be connected to other nodes. A node has inputs and outputs, which are the connections between two or more nodes.</p> <p>The Flow Engine typically comprises seven distinct types of nodes, each serving a specific purpose and collectively enhancing the functionality of your workflow.</p> <ul> <li>Conditional Nodes</li> <li>Database Nodes</li> <li>External Nodes</li> <li>Loops Nodes</li> <li>Response Nodes</li> <li>Storage Nodes</li> <li>Triggers Nodes</li> <li>Variables Nodes</li> </ul>"},{"location":"application-layer/flow-engine/exploring-nodes/#conditional-nodes","title":"Conditional Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#if-else","title":"If Else","text":"<p>The \"If Else\" node empowers you to implement conditional logic within your API flow. It enables you to evaluate a condition and perform different actions based on whether the condition is true or false. This node enhances the flexibility of your workflow, allowing you to guide the flow of execution based on specific criteria or outcomes.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#if-else-v2","title":"If Else v2","text":"<p>The \"If Else v2\" node, offers a streamlined approach to conditional logic in your API flow. Unlike branching into separate flows, it allows you to evaluate a condition and make a choice that leads to the same destination. This simplifies workflow design by converging paths that eventually meet, optimizing the execution of your API flow while maintaining flexibility in decision-making.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#switch-case","title":"Switch Case","text":"<p>The \"Switch Case\" node empowers you to implement multi-way branching logic within your API flow. By utilizing this node, you can evaluate different conditions and direct the flow of execution based on specific cases, enhancing the flexibility and adaptability of your workflow to various scenarios.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#database-nodes","title":"Database Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#custom-query-records","title":"Custom Query Records","text":"<p>The \"Custom Query Records\" node empowers you to define and execute tailored queries for retrieving records within your API flow, enabling precise data extraction and customization according to your specific requirements.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#delete-records","title":"Delete Records","text":"<p>The \"Delete Records\" node facilitates the removal of specified record from a data source within your API flow, enabling data management and ensuring accurate data maintenance as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#delete-multiple-records","title":"Delete Multiple Records","text":"<p>The \"Delete Multiple Records\" node empowers you to efficiently remove a set of designated records from a data source within your API flow, streamlining data management and enhancing bulk data deletion capabilities in your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#fetch-records","title":"Fetch Records","text":"<p>The \"Fetch Record\" node empowers you to retrieve specific records from a data source within your API flow, facilitating data extraction and integration for further processing or analysis as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#insert-record","title":"Insert Record","text":"<p>The \"Insert Record\" node empowers you to add new data entries into a data source within your API flow. By utilizing this node, you can seamlessly integrate new information, enhancing data management and expanding your workflow's capabilities.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#insert-multiple-records","title":"Insert Multiple Records","text":"<p>The \"Insert Multiple Records\" node allows you to efficiently add multiple new data entries into a data source within your API flow. This streamlines the process of integrating multiple pieces of information, enhancing data management and enabling bulk data insertion as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#list-records","title":"List Records","text":"<p>The \"List Records\" node empowers you to retrieve a list of records from a data source within your API flow. By utilizing this node, you can efficiently extract data, facilitating data analysis, processing, and integration as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#update-records","title":"Update Records","text":"<p>The \"Update Records\" node enables you to modify existing data entry within a data source within your API flow. By utilizing this node, you can seamlessly integrate updates to specific records, enhancing data management and enabling efficient data maintenance as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#update-multiple-records","title":"Update Multiple Records","text":"<p>The \"Update Multiple Records\" node empowers you to efficiently modify a set of designated data entries within a data source in your API flow. This node streamlines the process of updating multiple records simultaneously, enhancing data management and optimizing bulk data modification capabilities within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#external-nodes","title":"External Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#api-call","title":"API Call","text":"<p>The \"API Call\" node allows you to easily connect with external APIs within your API flow, enabling smooth interactions and expanding the functionality of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#loops-nodes","title":"Loops Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#for-loop","title":"For Loop","text":"<p>The \"For Loop\" node empowers you to iterate over a set of values or elements within your API flow, enabling you to perform repetitive actions, apply logic, and process data sequentially as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#while-loop","title":"While Loop","text":"<p>The \"While Loop\" node empowers you to create a loop within your API flow that continues executing as long as a specified condition is met. By utilizing this node, you can repeatedly perform actions or processes, enhancing automation and enabling dynamic data-driven iterations within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#response-nodes","title":"Response Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#http-response","title":"HTTP Response","text":"<p>The \"HTTP Response\" node allows you to define and send HTTP responses within your API flow, enabling you to communicate outcomes, status codes, and data back to clients or systems interacting with your API. This node is crucial for controlling the behaviour and feedback of your API endpoints.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#trigger-nodes","title":"Trigger Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#http-trigger","title":"HTTP Trigger","text":"<p>The \"HTTP Trigger\" node serves as a starting point for your API flow, enabling external systems to initiate the workflow by sending HTTP requests. This node allows you to define how your API responds when specific HTTP requests are received, facilitating seamless interaction between your API and external applications.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#variables-nodes","title":"Variables Nodes","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#arrays","title":"Arrays","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#append-to-array","title":"Append to Array","text":"<p>The \"Append to Array\" node facilitates the addition of new elements to an existing array within your API flow, enhancing data manipulation and enabling dynamic array expansion.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#contains","title":"Contains","text":"<p>The \"Contains\" node serves to determine whether a specific value is present within a given array, enhancing data analysis and enabling conditional logic within your API flow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#empty-array","title":"Empty Array","text":"<p>The \"Empty Array\" node allows you to create an empty array within your API flow, providing a starting point for data collection and manipulation, and enabling efficient array-based operations as needed in your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#length-of-array","title":"Length of Array","text":"<p>The \"Length of Array\" node enables you to determine the number of elements within an array within your API flow. This functionality enhances your ability to assess and manage array data, facilitating dynamic data manipulation and informed decision-making within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#reverse-array","title":"Reverse Array","text":"<p>The \"Reverse Array\" node empowers you to reverse the order of elements within an array within your API flow. This functionality enhances your ability to manipulate array data, enabling you to present data in a different sequence and facilitating dynamic data arrangement within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#mathematical","title":"Mathematical","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#add-variable","title":"Add Variable","text":"<p>The \"Add Variable\" node optimizes API flows by enabling summation operations, enhancing computational capabilities, and improving workflow efficiency through calculated variables.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#complex-maths-expr","title":"Complex Maths Expr","text":"<p>The \"Complex Math Expression\" node empowers you to perform intricate mathematical calculations seamlessly within your API flow, enabling advanced computations and data transformations.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#decrement-variable","title":"Decrement Variable","text":"<p>The \"Decrement Variable\" node allows you to decrease the value of a variable within your API flow. By using this node, you can perform subtraction operations on the variable, facilitating dynamic data manipulation and enabling iterative calculations as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#divide-variable","title":"Divide Variable","text":"<p>The \"Divide Variable\" node enables you to perform division operations on a variable within your API flow, facilitating numerical calculations and dynamic data transformations as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#increment-variable","title":"Increment Variable","text":"<p>The \"Increment Variable\" node enables you to increase the value of a variable within your API flow. By utilizing this node, you can conduct addition operations on the variable, supporting dynamic data manipulation and iterative calculations within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#multiply-variable","title":"Multiply Variable","text":"<p>The \"Multiply Variable\" node enables you to perform multiplication operations on a variable within your API flow. By utilizing this node, you can conduct numerical calculations and dynamic data transformations, enhancing your workflow's computational capabilities.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#subtract-variable","title":"Subtract Variable","text":"<p>The \"Subtract Variable\" node enables you to conduct subtraction operations on a variable within your API flow. By utilizing this node, you can perform numerical calculations and dynamic data transformations, enhancing your workflow's computational capabilities and supporting various data-driven scenarios.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#strings","title":"Strings","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#append-to-string","title":"Append to String","text":"<p>The \"Append to String\" node empowers you to dynamically extend a string within your API flow, enabling flexible content building and dynamic string concatenation.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#concat-strings","title":"Concat Strings","text":"<p>The \"Concatenate Strings\" node enables you to effortlessly combine multiple strings within your API flow, facilitating dynamic text creation and versatile content generation.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#set-variable","title":"Set Variable","text":"<p>The \"Set Variable\" node allows you to define and assign values to variables within your API flow. This node is essential for storing and managing data that can be used throughout the workflow, enhancing data manipulation and enabling dynamic value assignments in your workflow logic.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#slice-string","title":"Slice String","text":"<p>The \"Slice String\" node empowers you to extract a portion of a string within your API flow. By utilizing this node, you can manipulate string data, facilitating dynamic text extraction and enabling precise data manipulation within your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#to-lower","title":"To Lower","text":"<p>The \"To Lower\" node allows you to convert a string to lowercase within your API flow. By using this node, you can ensure uniformity in text formatting, facilitate data manipulation, and improve consistency in your workflow's textual data.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#to-upper","title":"To Upper","text":"<p>The \"To Upper\" node enables you to convert a string to uppercase within your API flow. By utilizing this node, you can ensure standardized text formatting, enhance data manipulation, and maintain consistent capitalization across your workflow's textual data.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#trim-string","title":"Trim String","text":"<p>The \"Trim String\" node empowers you to remove leading and trailing whitespace from a string within your API flow. By utilizing this node, you can enhance data cleanliness, facilitate accurate data processing, and ensure consistent formatting in your workflow's textual data.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#json","title":"JSON","text":""},{"location":"application-layer/flow-engine/exploring-nodes/#merge-json","title":"Merge JSON","text":"<p>The \"Merge JSON\" node allows you to combine and unify multiple JSON objects within your API flow. By using this node, you can seamlessly integrate data from various sources, enhancing data consolidation and enabling comprehensive JSON manipulation as part of your workflow.</p>"},{"location":"application-layer/flow-engine/exploring-nodes/#build-json-object","title":"Build JSON Object","text":"<p>The \"Build JSON Object\" node allows you to construct and customize JSON data structures effortlessly within your API flow, enhancing data formatting and facilitating seamless integration with other systems.</p>"},{"location":"application-layer/flow-engine/introduction/","title":"Flow-Engine","text":"<p>Flow-engine is way through which users can design API workflows that fits their specific requirements for that API. Flow-engine offers a range of nodes that can be utilized to create and maintain the flow of the APIs. These nodes act as building blocks, allowing users to customize and control the behaviour of the API flow.</p>"},{"location":"application-layer/flow-engine/introduction/#key-features","title":"Key Features","text":"<ol> <li> <p>Visual Representation: The flow engine provides an intuitive visual interface that enables users to create and manage API workflows using different types of nodes based on required functionality.</p> </li> <li> <p>Node Variety: Users have access to a diverse set of nodes, each serving a specific purpose within the API workflow such as <code>HTTP Request</code>, <code>HTTP Response</code> nodes.</p> </li> <li> <p>Customizable Logic: Nodes like <code>Fetch Record</code>, <code>Fetch Multiple Records</code>, <code>Build JSON Object</code> etc. allow users to introduce custom logic and transformations.</p> </li> <li> <p>Data Manipulation: Users can fetch records, manipulate data, and build complex responses using the provided nodes.</p> </li> <li> <p>Flexibility: The platform accommodates a wide range of API flow scenarios, from simple interactions to more intricate processes.</p> </li> <li> <p>Efficiency: Users can design and modify API flows in an efficient manner, reducing development time.</p> </li> </ol>"},{"location":"application-layer/full-text-search/","title":"Full Text Search","text":""},{"location":"application-layer/full-text-search/#what-is-full-text-search","title":"What is Full-Text Search?","text":"<p>Full-text search is a specialized search technique that allows users to search for text within large amounts of textual data and retrieve relevant documents or records that contain the queried words or phrases. Unlike traditional search, which typically requires an exact match, full-text search enables users to find relevant information even if the search terms are not an exact match.</p> <p>Traditional databases are primarily designed for structured data storage and retrieval, where queries are usually based on specific fields or values. While traditional databases can handle some text-based searching using techniques like wildcard or pattern matching, they are not optimized for efficient full-text search across extensive text data.</p>"},{"location":"application-layer/full-text-search/#understanding-full-text-search-with-an-example","title":"Understanding full text search with an example","text":"<p>Let's assume we have a collection of students with various attributes such as name, age, email, student ID, height, and address. We want to query the students based on their names.</p> <p>First, we need to index the collection by creating an index specifically for the name attribute. The index allows us to quickly locate documents that contain specific names without traversing the entire collection.</p> <p>Here's an example of the initial collection of 4 students:</p> <pre><code>Alice (age: 20, email: alice@example.com, student ID: 1234, height: 165 cm, address: 123 Main St)\nBob (age: 22, email: bob@example.com, student ID: 5678, height: 170 cm, address: 456 Elm St)\nHenry (age: 19, email: henry@example.com, student ID: 4321, height: 160 cm, address: 321 Pine St)\nBob (age: 21, email: bob2@example.com, student ID: 9876, height: 175 cm, address: 789 Oak St)\n</code></pre> <p>Once the indexing is completed, we would have separate indexes for each student's name:</p> <pre><code>Alice: [(age: 20, email: alice@example.com, student ID: 1234, height: 165 cm, address: 123 Main St)]\nBob: [\n  Bob (age: 22, email: bob@example.com, student ID: 5678, height: 170 cm, address: 456 Elm St),\n  Bob (age: 21, email: bob2@example.com, student ID: 9876, height: 175 cm, address: 789 Oak St)\n]\nHenry: [\n  (age: 19, email: henry@example.com, student ID: 4321, height: 160 cm, address: 321 Pine St)\n]\n</code></pre> <p>Now, when a user queries the students based on their names, we can utilize the name as an index to directly retrieve the relevant documents without having to traverse the entire collection. For example, if the user searches for the name \"Bob,\" we can quickly access the collections associated with the name \"Bob\" through the corresponding index.</p> <p>This approach significantly improves search performance as it avoids the need to scan every document in the collection. Instead, it leverages the index to pinpoint the relevant documents efficiently.</p> <p>However, indexing require some disk space and can consume a lot of resources when created and this was very basic example of indexing.</p>"},{"location":"application-layer/full-text-search/#understanding-the-full-text-search-indexing-process","title":"Understanding the full-text search indexing process","text":"<p>Indexing is a crucial step in full-text search that allows for efficient retrieval of information from a collection of documents. While the previous example provided a basic understanding of indexing by focusing on indexing the \"name\" attribute, it's important to note that there are various indexing techniques available, each with its strengths and considerations.</p> <p>The indexing process in full-text search is determined by the analyzer used. An analyzer is a component responsible for tokenizing the text, applying various transformations, and generating indexed terms. How to Create a Search Index?</p>"},{"location":"application-layer/full-text-search/#processing-data-with-analyzers","title":"Processing data with Analyzers","text":"<p>Analyzers in Atlas Search are composed of a tokenizer, which extracts tokens from the text, and filters that you define. These filters are applied to the tokens, enabling the creation of indexable terms that account for variations in punctuation, capitalization, filler words, and more.</p> <p>By configuring the analyzer for a specific field, you can define how the data is processed and transformed during the indexing process. This allows you to handle common challenges in full-text searches, such as case insensitivity, stop word removal, stemming, and more. The combination of tokenizer and filters in the analyzer ensures that the indexed terms accurately reflect the search requirements and provide relevant search results. How to Create a Custom Analyzer?</p>"},{"location":"application-layer/full-text-search/create-custom-analyzer/","title":"Creating a Custom Analyzer","text":"<ul> <li> <p>Browse to Full Text Search --&gt; Custom Analyzers and you will see a list of custom analyzers if there will be any.</p> <p> </p> </li> <li> <p>On the top right corner of this page, click on Create Custom Analyzer button to create a custom analyzer.</p> </li> <li> <p>It will open a form to create the custom analyzer. Provide a name for the analyzer and select the tokenizer type and also fill in the required tokenizer properties.</p> <p>A Tokenizer determines how Atlas Search splits up text into discrete chunks for indexing. Tokenizers require the type of tokenizer and some tokenizers have additional properties as well.</p> <p>Read More about the tokenizers</p> </li> <li> <p>After selecting the tokenizer type and filling in the tokenizer properties(if any), click on Create button to create the Custom Analyzer.</p> </li> </ul>"},{"location":"application-layer/full-text-search/create-search-index/","title":"Creating a Search Index","text":"<p>Info</p> <p>Make sure that your Database config is configured with MongoDB Atlas configuration, otherwise, you will not be able to create/view the search indexes.</p> <ul> <li> <p>Browse to Full Text Search --&gt; Search Indexes and you will see a list of search indexes if there will be any.</p> <p> </p> </li> <li> <p>On the top right corner of this page, click on Create Search Index button to create a search index. </p> </li> <li> <p>It will open a form to create the search index. Select the model for which you want to create the search index and give a name to your search index. ( By default it will take the model name as the search index name) </p> <p> </p> </li> <li> <p>Click on the Next button after filling in the search index details.</p> </li> <li> <p>The next stage is to Define Field Mappings, which can be done in two ways:</p> <ul> <li>Dynamic Field Mapping: Use dynamic mappings if your schema changes regularly, is unknown, or when experimenting with Full-text Search.</li> </ul> <p> </p> <ul> <li> <p>Static Field Mapping: Use static mappings to configure index options for fields that you don't want to be indexed dynamically, or to configure a single field independently from others in an index. </p> <p>For static field mapping toggle Dynamic to False, and you will get the option to add mappings for the fields you want to be indexed.</p> </li> </ul> <p> </p> <ul> <li>Now select the field that you want to be indexed and select the analyzer that you want to be used to process the data of that field and clicking on Create button will create a search index for that model.</li> </ul> </li> </ul>"},{"location":"application-layer/full-text-search/fts-implementation/","title":"Implement full-text search in your application","text":"<p>Full-text search is a complex topic. It requires a good amount of expertise to set up correctly. Using a fully integrated solution such as MongoDB Atlas Search makes it easy for your team to add those features to your application in a matter of minutes.</p> <p>Cosmocloud comes with a built-in feature to add full-text search in your application in a few minutes. It internally uses Atlas Search to implement full-text search but it is very less complicated than atlas search.</p> <p>Info</p> <p>Cosmocloud Full Text Search is powered by MongoDb Atlas Search and hence, it requires MongoDb Atlas Configuration to implement full-text search in your application.</p> <p>Setup MongoDB Atlas Database Config</p>"},{"location":"application-layer/full-text-search/fts-implementation/#adding-full-text-search-in-your-application","title":"Adding Full-Text search in your application","text":"<ul> <li> <p>In order to incorporate full-text search functionality in your application, you must create search indexes. These indexes serve as a unique definition for a database model, specifying which fields should be indexed and which analyzers should be used for processing those specific fields.</p> </li> <li> <p>You can create a Search index on a single field or on multiple fields. We recommend that you index the fields that you regularly use to sort or filter your data in order to quickly retrieve the documents that contain the relevant data at query time.</p> </li> <li> <p>When creating search indexes for fields, you have the option to utilize the built-in analyzers provided by Atlas Search, or you can create custom analyzers to tailor the indexing process according to your specific requirements.</p> </li> <li> <p>Each Database Collection model allows for the creation of a single search index. Within that model, you can choose between using built-in or custom analyzers for each field, based on the specific processing needs of that particular field.</p> </li> </ul> <p>Info</p> <p>You cannot create more than:</p> <ul> <li>3 indexes on M0 clusters.</li> <li>5 indexes on M2 clusters.</li> <li>10 indexes on M5 clusters.</li> </ul> <p>There are no limits to the number of indexes you can create on M10+ clusters.</p>"},{"location":"application-layer/models/","title":"Model Types","text":"<p>Models defines the various schema definitions in your project, where you would need to define the structure of the data. There are 3 types of Models in Cosmocloud right now -</p>"},{"location":"application-layer/models/#database-collection-models","title":"Database Collection Models","text":"<p>These define and mirror the database collections (tables / entities) in the system. The name of these models should be exactly the same as the underlying Database collection.</p> <p>Warning</p> <p>You can check the <code>Database Collection</code> model naming convention here. You can easily define these as strings containing [a-zA-Z0-9_] characters and cannot begin with numbers or underscore.</p>"},{"location":"application-layer/models/#query-params-models","title":"Query Params Models","text":"<p>Query param models, are structures or schemas that define the expected format and data types of query parameters used in API calls. They serve as a set of rules that guide how query parameters should be constructed and what types of values they should hold when making requests to an API.</p>"},{"location":"application-layer/models/#request-body-models","title":"Request Body Models","text":"<p>A \"Request Body Model\" is a structured definition that outlines the format, structure, and data types expected in the payload of an HTTP request made to an API endpoint. It serves as a blueprint for using HTTP methods like POST, PUT, PATCH, and DELETE. Unlike GET requests that retrieve data, these methods involve sending data to the server for processing .</p> <p>Info</p> <p>Request Body has an option set as `extra_fields=forbid`` which makes your request bodies strict. Any extra field passed while calling the API, would lead to 400 Bad Request with appropriate error message.</p>"},{"location":"application-layer/models/database-collections/","title":"Database Collections","text":"<p>These models define the structure of your Database's collections (or tables) and define the various entities that live in your system. You can define entities as a First Class citizen of your app like Students, Orders, Payments, etc which live on it's own as a single record.</p> <p>Cosmocloud is powered by MongoDB - a full featured document database, which lets you model the data in a very efficient manner - very different from how you do in a Relational World.</p> <p>Warning</p> <p>You can check the <code>Database Collection</code> model naming convention here. You can easily define these as strings containing [a-zA-Z0-9_] characters and cannot begin with numbers or underscore.</p> <p>You can check the various Data Modelling Concepts as given by MongoDB as well as check a dedicated series on various Data Modelling Patterns you should follow while designing your system.</p> <p>Info</p> <p>You can also reach out to Cosmocloud expert team to help in better designing and building your system's data models.</p> <p>One important feature to note while creating these models is that, each record would implicitly have an <code>_id</code> (check docs) field as ObjectId field, which will be auto generated when inserting records in the database. You do not have to explicitly define the <code>_id</code> field if you are not overriding the default behaviour.</p> <p>Info</p> <p><code>_id</code> field acts as an automatic Primary Key in MongoDB collections, as well as MongoDB automatically creates a unique index on <code>_id</code>.</p>"},{"location":"application-layer/models/defining-schema/","title":"Defining Model Schema","text":""},{"location":"application-layer/models/defining-schema/#what-is-a-model-schema","title":"What is a Model Schema ?","text":"<p>Model schema is a structured and organized set of rules, specifications, and definitions that define how data should be organized, stored, and managed within a software application or database. It serves as a blueprint that outlines the structure, data types, relationships, and constraints for the information that the application handles.</p>"},{"location":"application-layer/models/defining-schema/#supported-data-types-in-model-schema","title":"Supported Data types in Model Schema","text":"<ol> <li> <p>ObjectID: An ObjectID is a unique identifier often used in databases, particularly in MongoDB. It's a 12-byte identifier typically represented as a hexadecimal string. ObjectIDs are used to uniquely identify documents in a collection.</p> </li> <li> <p>Boolean: A boolean data type represents two possible values: True or False. Booleans are often used to express binary decisions or states.</p> </li> <li> <p>String: A string data type represents text. It can contain letters, numbers, symbols, and spaces. Strings are used to store textual information.</p> </li> <li> <p>Integer: An integer data type represents whole numbers, both positive and negative, without decimal points. Integers are used for counting and calculations that involve whole quantities.</p> </li> <li> <p>Float: A float data type represents decimal numbers. Unlike integers, floats can have fractional parts. They are used for calculations involving real numbers.</p> </li> <li> <p>Dict: A dictionary is a collection of key-value pairs. Each key in the dictionary maps to a corresponding value. Dictionaries are used to store structured data and provide quick access to values based on their keys.</p> </li> <li> <p>Nested: The \"Nested\" type typically refers to nested or embedded structures within a data model. This could involve nesting one set of attributes within another to represent more complex data relationships.</p> </li> <li> <p>Array: An array is a collection of elements of the same data type, ordered by an index. Arrays are used to store multiple values in a single variable.</p> </li> </ol>"},{"location":"application-layer/models/defining-schema/#schema-layout","title":"Schema Layout","text":"<p>Let us assume we have a student data with given Schema that we need to store in database :</p> <pre><code>{\n    \"id\":{\n        \"type\":\"objectId\",\n        \"required\":true,\n    },\n    \"name\":{\n       \"type\":\"string\",\n       \"required\":true,\n    },\n    \"age\":{\n        \"type\":\"number\",\n        \"required\":true,\n    },\n    \"subjects\":{\n        \"type\":\"string[]\",\n        \"required\":true,\n    },\n    \"address\":{\n        \"city\":{\n            \"type\":\"string\",\n            \"required\":true,\n        },\n        \"state\":{\n            \"type\":\"string\",\n            \"required\":true,\n        }\n    }\n\n}\n</code></pre> <p>Schema given above would appear something like this in our user interface  </p> <p></p>"},{"location":"application-layer/models/query-params/","title":"Query Param Models","text":"<p>These models, as understood, are used to define the schema of query params to pass while calling an API. These can only be used in API's <code>Query Params</code> option.</p> <p>As they are passed in the URL, there are limited types of fields you can define in these types of models - mainly native types such as String, Integers, Boolean, Floats and ObjectIds(passed as strings). Complex field types such as Nested, Dict and List are not allowed.</p>"},{"location":"application-layer/models/query-params/#query-params-validation","title":"Query Params Validation","text":"<p>Any API that has a Query Params attached to it, will validate the same when invoked at run time. Any errors pertaining to the validation of the Query Params will throw a <code>400 - Bad Request</code> with the appropriate error messages.</p> <p>Sample error messages can look like - </p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"params\",\n                \"name\"\n            ],\n            \"msg\": \"value is not a valid string\",\n            \"type\": \"type_error.string\"\n        }\n    ]\n}\n</code></pre>"},{"location":"application-layer/models/request-bodies/","title":"Request Body Models","text":"<p>These models, as the name suggests, are required when you need to pass a <code>Request Body</code> in an API. These APIs should have a request method as POST, PUT, PATCH, DELETE but not GET.</p> <p>This is very similar to <code>Database Collection</code> model, where you can define nested models and entities, but can only be used in API's Request Body option.</p> <p>Info</p> <p>Request Body has an option set as `extra_fields=forbid`` which makes your request bodies strict. Any extra field passed while calling the API, would lead to 400 Bad Request with appropriate error message.</p>"},{"location":"application-layer/models/request-bodies/#request-body-validation","title":"Request Body Validation","text":"<p>Any API that has a request body attached to it, will validate the same when invoked at run time. Any errors pertaining to the validation of the Request Body will throw a <code>400 - Bad Request</code> with the appropriate error messages.</p> <p>Sample error messages can look like - </p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"name\"\n            ],\n            \"msg\": \"value is not a valid string\",\n            \"type\": \"type_error.string\"\n        }\n    ]\n}\n</code></pre>"},{"location":"application-layer/releases/how-to-deploy/","title":"Deploying APIs and Models - Step-by-Step Guide","text":"<p>This guide outlines the process of deploying APIs and models using the \"Releases\" section. Follow these steps to ensure that the latest changes are deployed smoothly.</p>"},{"location":"application-layer/releases/how-to-deploy/#navigate-to-releases-section","title":"Navigate to Releases Section","text":"<ul> <li>From the project dashboard, navigate to the \"Application Layer\" dropdown.</li> <li>Select \"Releases\" from the dropdown menu.</li> <li>Upon entering the \"Releases\" section, check if any changes have been made to models or APIs, or if new models/APIs have been created since the last deployment.</li> <li>If changes are detected, a draft banner will appear at the top of the page. </li> </ul>"},{"location":"application-layer/releases/how-to-deploy/#review-and-deploy-changes","title":"Review and Deploy Changes","text":"<ul> <li>In the draft banner, you'll see a message: \"Changes have been made to your project since the last deploy.\"</li> <li>Click on the \"Review and Deploy\" button within the banner.</li> </ul>"},{"location":"application-layer/releases/how-to-deploy/#deploy-modal","title":"Deploy Modal","text":"<ul> <li>A deploy modal will appear, displaying the entities that have been changed or newly created since the last deploy (models or APIs).</li> <li>Select all the entities that you want to deploy</li> <li>Click \"Next\" at the bottom of the modal to proceed to next step.</li> </ul>"},{"location":"application-layer/releases/how-to-deploy/#select-deployment-environment","title":"Select Deployment Environment","text":"<ul> <li>Choose the environment in which you want to deploy the selected entities.</li> <li>Provide a unique version identifier for this deployment.</li> <li>Add a brief description of the changes or updates included in this deployment. </li> </ul>"},{"location":"application-layer/releases/how-to-deploy/#initiating-deployment","title":"Initiating Deployment","text":"<ul> <li>Once you've confirmed the deployment environment, version, and description, click on the \"Deploy\" button at the bottom of the modal. The deployment process will begin.</li> <li>Once the deployment is successfully completed, you'll receive a confirmation message indicating the success.</li> <li>Your APIs and models are now updated in the selected environment with the changes you've deployed. </li> </ul>"},{"location":"application-layer/releases/introduction/","title":"Releases","text":"<p>The Releases section provides an overview of recent changes made to the API's and models, along with a list of currently deployed versions. This documentation will guide you through understanding the draft banner, accessing deployed versions, and deploying new versions.</p>"},{"location":"application-layer/releases/introduction/#understanding-draft-banner","title":"Understanding Draft Banner","text":"<p>When changes are made to the API's or models, a draft banner will be displayed to indicate that new updates are available. The banner will include a brief description and provide a call to action to review and deploy these changes.</p> <p></p>"},{"location":"application-layer/releases/introduction/#deployed-versions-list","title":"Deployed Versions List","text":"<p>You can see list of the the versions that are currently deployed and active in the system just below the draft banner. Each version listing includes following information:</p> <ol> <li>Version</li> <li>Status</li> <li>Description</li> <li>Time of deployment</li> <li>Deployed by</li> </ol> <p>Given list can be filtered by <code>Version</code> or <code>Deployed by</code></p> <p></p>"},{"location":"application-layer/secrets/create-secrets/","title":"Creating Secrets","text":"<p>Secrets allows you to store and manage confidential information of our application. You can create <code>Authentication</code>,<code>Database</code> or <code>Custom</code> secrets:</p>"},{"location":"application-layer/secrets/create-secrets/#how-to-create-a-secret","title":"How to Create a Secret","text":"<ol> <li> <p>Choose the desired environment from the dropdown menu located at the top right corner for which you wish to     create secrets.</p> </li> <li> <p>Click on the <code>Create secret</code> button in the Secrets section.</p> </li> <li> <p>Give a unique name for the secret you intend to create.</p> </li> <li> <p>Choose the type of secret you want to create: <code>Authentication</code>, <code>Database</code>, or <code>Custom</code>.</p> </li> <li> <p>If you select the <code>Authentication</code> secret :</p> <ol> <li> <p>Enable the secret by setting the \"Enabled\" toggle to true.</p> </li> <li> <p>Specify the JSON Web Key Set (JWKS) URI, a URL containing public keys for token validation.</p> </li> <li> <p>Define the intended audience (aud) for the tokens.</p> </li> </ol> <p></p> </li> <li> <p>If you select the <code>Database</code> option:</p> <ol> <li> <p>Enter name of the database in secret.</p> </li> <li> <p>Choose the mode for the database secret: Database only or MongoDB Atlas.</p> </li> <li> <p>If the mode is set to Database:</p> <ol> <li>Provide the required MongoDB URI for connecting to your database.</li> </ol> </li> <li> <p>If the mode is set to MongoDB Atlas:</p> <ol> <li>Enter the projectId, publicKey, privateKey, and clusterName associated with your MongoDB Atlas account.</li> </ol> </li> <li> <p>Review the entered details for accuracy.</p> </li> </ol> <p></p> </li> <li> <p>If you select the <code>Custom</code> option:</p> <ol> <li>Enter the key-value pairs as required.</li> </ol> <p></p> </li> <li> <p>Click on \"Create button\" to create the database secret.</p> </li> <li> <p>Integrate the secret into your application's database connection logic.</p> </li> </ol> <p>Info</p> <p><code>Authentication</code>, and <code>Database</code> secrets can only be created once. For creating multiple secrets select <code>Custom Secret</code> instead.</p>"},{"location":"application-layer/secrets/delete-secrets/","title":"Deleting Secrets","text":"<p>Deleting secrets is irreversible! So make sure you want to say goodbye before proceeding. Here's how you can delete a secret:</p>"},{"location":"application-layer/secrets/delete-secrets/#1-navigate-to-secret-listing-page","title":"1. Navigate to Secret Listing Page","text":"<ul> <li>Start by heading to the \"Secret\" section from your main dashboard. This is where all your secrets are listed.</li> </ul>"},{"location":"application-layer/secrets/delete-secrets/#2-locate-the-secret-to-delete","title":"2. Locate the Secret to Delete","text":"<ul> <li>Find the secret you want to delete in the list. Each secret will have a convenient three dots icon [\u2022\u2022\u2022] next to it.</li> <li>Click on the three dots icon next to the secret you want to delete. This will open up a menu with various options.</li> <li>Among the options in the menu, you'll see \"Delete.\" Click on it.</li> </ul>"},{"location":"application-layer/secrets/delete-secrets/#3-confirm-deletion","title":"3. Confirm Deletion","text":"<ul> <li> <p>You'll then be presented with a delete confirmation modal. This is your last chance to change your mind! Confirm that you really want to delete the secret.</p> </li> <li> <p>If you're absolutely sure about deleting the secret, click \"Yes.\"</p> </li> </ul> <p></p>"},{"location":"application-layer/secrets/delete-secrets/#4-secret-deleted","title":"4. Secret Deleted","text":"<ul> <li>Your secret has been deleted. Any configurations, settings, and resources associated with it are now gone.</li> </ul> <p>Warning</p> <p>Be extra careful when deleting secrets. It's irreversible, and you'll lose all data related to that secret.</p>"},{"location":"application-layer/secrets/introduction/","title":"Introduction","text":"<p>Secrets feature provides a centralized and secure way to store and manage your application's secrets, so it can be used anywhere in your application without exposing the secrets to outer environments.</p>"},{"location":"application-layer/secrets/introduction/#what-is-a-secret","title":"What is a Secret?","text":"<p>A secret is a piece of sensitive information that is intended to be kept confidential and secure. In the context of software development, a secret typically refers to sensitive data such as passwords, API keys, encryption keys, tokens,AWS credentials and other authentication or authorization credentials.</p>"},{"location":"application-layer/secrets/introduction/#available-secret-types","title":"Available Secret Types","text":"<ul> <li>Authentication secrets</li> <li>Database secrets</li> <li>Custom secrets</li> </ul>"},{"location":"application-layer/secrets/types-of-secrets/","title":"Types of Secrets","text":""},{"location":"application-layer/secrets/types-of-secrets/#authentication-secret","title":"Authentication secret","text":"<p><code>Authentication secret</code> is a confidential piece of information used to verify the identity of users or applications during the authentication process. It is a fundamental component of secure access control and user authentication. Authentication secrets are used to ensure that only authorized users or applications are granted access to protected resources.</p>"},{"location":"application-layer/secrets/types-of-secrets/#database-secret","title":"Database secret","text":"<p><code>Database secret</code> is a confidential credential used to establish secure connections and access databases. It includes authentication information that allows your application to authenticate itself to a database management system (i.e. MongoDB). Database secrets typically include credentials such as <code>Database name</code>, <code>Mode</code>, <code>ProjectId</code>, <code>PublicKey</code>, <code>PrivateKey</code>, <code>ClusterName</code> or <code>MongoURI</code>.</p>"},{"location":"application-layer/secrets/types-of-secrets/#custom-secret","title":"Custom secret","text":"<p>A <code>Custom secret</code> is a confidential piece of information that you can store in your project which can be used for specific purposes within the application. Custom secret can be an API key, encryption keys, tokens, AWS credentials or any other authentication or authorization credentials.</p>"},{"location":"application-layer/secrets/update-secrets/","title":"Updating Secrets","text":"<p>Updating your secret is a breeze! Whether it's tweaking settings or changing configurations, you can easily do it all. Here's a step-by-step guide to updating your secret:</p>"},{"location":"application-layer/secrets/update-secrets/#1-navigate-to-the-secret-listing-page","title":"1. Navigate to the Secret Listing Page","text":"<ul> <li>From the project dashboard, click on the \"Secrets\" section. You'll see a list of all your secrets you've created.</li> </ul>"},{"location":"application-layer/secrets/update-secrets/#2-select-the-secret-to-update","title":"2. Select the Secret to Update","text":"<ul> <li>Find the secret you want to update in the list and click on it. This will take you to the \"Secret Details\" page of that secret.</li> </ul>"},{"location":"application-layer/secrets/update-secrets/#3-explore-the-editable-sections","title":"3. Explore the Editable Sections","text":"<ul> <li>On the \"Secret Details\" page, you'll see various sections relevant to the selected secret. Some sections will be editable, while others are read-only.</li> </ul>"},{"location":"application-layer/secrets/update-secrets/#4-make-your-changes","title":"4. Make Your Changes","text":"<ul> <li>Depending on the secret type, you'll have different editable options. For example:</li> <li>In the \"Authentication\" secret, you can update <code>enabled</code>, <code>jwksURI</code> and <code>Audience</code> fields.</li> <li>In the \"Database\" secret, you can update <code>Mode</code>, <code>mongoDB URI</code>, <code>projectId</code>, <code>Public Key</code>, <code>Private Key</code>, and <code>Cluster Name</code> based on the mode selected .</li> <li>In a \"Custom\" secret, you'll have full flexibility to modify and customize its keys and values.</li> </ul>"},{"location":"application-layer/secrets/update-secrets/#5-click-on-save","title":"5. Click on Save","text":"<ul> <li>Once you've made the desired changes, click on the \"Save\" button at the top-right of the page.</li> <li>Your changes have been saved, and secret is now updated with the new settings.</li> </ul>"},{"location":"getting-started/account-setup/","title":"Account Setup","text":"<p>You can quickly Sign Up on Cosmocloud to create your new account. You would be required to fill in these details -</p> <ul> <li>Your name.</li> <li>A unique username.</li> <li>Your email, which will verify your account.</li> <li>A strong password, with a mix of lowercase / uppercase letters, digits and special symbols.</li> </ul>"},{"location":"getting-started/account-setup/#account-confirmation","title":"Account Confirmation","text":"<p>Upon successful signup, you will be redirected to Confirm User page, where you need to enter a 6 digit passcode. You can find this passcode in your email account (you used for sign up).</p> <p>Warning</p> <p>There are possibilities that the email might end up in your spam account. If so, please allow / whitelist Cosmocloud's email.</p>"},{"location":"getting-started/account-setup/database-setup/","title":"Database Setup","text":"<p>After creating your project, the only thing left to do is to connect your database. There are two ways to connect your MongoDB Database, one a direct integration with MongoDB Atlas which will empower more features on Cosmocloud, and second is to connect just the database.</p>"},{"location":"getting-started/account-setup/database-setup/#mongodb-atlas-integration","title":"MongoDB Atlas Integration","text":"<p>This is the preferred way to connect to your MongoDB databases. With this integration, Cosmcloud will be automatically be able to connect and integrate with Atlas services.</p> <p>Info</p> <p>This is the preferred way as Cosmocloud will be able to create Search Indexes as well as use other Atlas features directly out of the box.</p> <p>To connect and integrate your MongoDB Atlas account, follow these steps -</p> <ol> <li>Login to your MongoDB Atlas account, or create a new account.</li> <li>Create a new MongoDB Atlas cluster, if not already done. You can start with a M0 (Free Forever) cluster and then scale as per need.</li> <li>Visit Access Manager tab on your MongoDB organisation page.</li> <li> <p>Click on Create API Key button on top left. When creating a API Key -</p> <ol> <li>Add a description such as <code>API Key for Cosmocloud</code>.</li> <li>Make sure you add the permission Organisation Read Only from the Permissions dropdown, without which the integration would not work.</li> <li>Copy the generated Public Key and Private Key that is generated for you. These will not be available to view again, so make sure you have copied them securely.</li> </ol> </li> <li> <p>Now visit Access Manager again and this time, select your Project Access settings.</p> </li> <li>Click on the Invite to Project and invite the API key user you just created above in your project, giving them Project Owner access. This will allow Cosmocloud to integrate perfectly and automatically build connection strings.</li> <li>Come back to Cosmocloud on your project dashboard. Open database configuration via Application Layer --&gt; Configs.</li> <li>Make sure you are on Connect with MongoDB Atlas tab, as shown below.</li> <li> <p>Fill the required fields -</p> <ul> <li>MongoDB Public Key - Paste the Public Key you had copied on Step 4.3.</li> <li>MongoDB Private Key - Paste the Private Key you had copied on Step 4.3.</li> <li>MongoDB Project ID - This is the Project ID of your MongoDB Project, available in Project Settings page.</li> <li>Cluster Name - The name of the Database cluster you have spinned up.</li> <li>Database Name - The logical name of the database where you want your data stored / already stored.</li> </ul> </li> </ol> <p></p>"},{"location":"getting-started/account-setup/database-setup/#connecting-mongodb-database-only","title":"Connecting MongoDB Database Only","text":"<p>Use this way to connect to your MongoDB instance quickly, but this will forbid you to use some features like Full Text Search and Change Data Capture on Cosmocloud. You may also use this feature if you have a self-hosted deployment of MongoDB, by exposing the same to internet and connecting here.</p> <p></p> <p>Fill the required fields as show in screenshot above - - MongoDB URI - The database URI connection string in the format - <code>mongodb+srv://&lt;username&gt;:&lt;pwd&gt;@&lt;IP_ADDR&gt;</code> - Database Name - The logical name of the database where you want your data stored / already stored.</p> <p>Info</p> <p>You can also connect to MongoDB Atlas cluster via this method by copy pasting the connection URL.</p> <p>Warning</p> <p>Make sure you open your database to internet in MongoDB Atlas's Network Access tab by whitelisting 0.0.0.0/0 and opening it to internet.</p> <p>Info</p> <p>Currently, Cosmocloud supports only MongoDB Atlas as the database provider. Further down the line, we would also support more full featured OLTP databases. Reach out to us if you need any help in data migration.</p>"},{"location":"getting-started/account-setup/first-project/","title":"Your First Project","text":""},{"location":"getting-started/account-setup/first-project/#organisation-setup","title":"Organisation setup","text":"<p>When you log in for the first time, you'll be asked to create an organisation. An organisation is the home for all your projects, including permission management as well as billing and payments.</p> <p>Warning</p> <p>An organisation needs to have a unique name across the system. You would only be allowed to create an organisation if the name is not in use by any other Cosmocloud user.</p>"},{"location":"getting-started/account-setup/first-project/#creating-projects","title":"Creating projects","text":"<p>A single project is like a single Micro-service, which can independently be deployed, scaled and managed. To create a project, you'll need to provide the following -</p> <ul> <li>A unique name within your Organisation. (You can also update this later)</li> <li>Your preferred Cloud Provider.</li> <li>Your preferred region in the chosen Cloud Provider.</li> </ul> <p>Warning</p> <p>You might want to chose the same Cloud Provider / region, which you might already be using with your existing services, and/or where your users / data is residing. This will help lower the network latency and increase performance.</p> <p>Once created, the underlying infrastructure and resources are already spinned up for you in the background, you don't have to worry about anything else!</p>"}]}